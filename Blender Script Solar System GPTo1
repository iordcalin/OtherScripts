import bpy
import math
from mathutils import Vector

# Clear existing objects
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# Create the Sun
bpy.ops.mesh.primitive_uv_sphere_add(radius=1.5, location=(0, 0, 0))
sun = bpy.context.object
sun.name = 'Sun'

# Add emission material to the Sun
mat_sun = bpy.data.materials.new(name="SunMaterial")
mat_sun.use_nodes = True
nodes = mat_sun.node_tree.nodes
emission = nodes.new(type='ShaderNodeEmission')
output = nodes['Material Output']
nodes.remove(nodes['Principled BSDF'])
mat_sun.node_tree.links.new(emission.outputs['Emission'], output.inputs['Surface'])
emission.inputs['Color'].default_value = (1, 0.5, 0, 1)
emission.inputs['Strength'].default_value = 5
sun.data.materials.append(mat_sun)

# Planet data: (name, distance from sun, size, color, orbital period, rotation period)
planets = [
    ('Mercury', 3, 0.2, (0.8, 0.7, 0.6, 1), 88, 58.6),
    ('Venus', 4, 0.25, (0.9, 0.6, 0.3, 1), 225, -243),
    ('Earth', 5, 0.25, (0, 0, 1, 1), 365, 1),
    ('Mars', 6, 0.15, (1, 0, 0, 1), 687, 1.03),
    ('Jupiter', 8, 0.5, (0.9, 0.6, 0.5, 1), 4333, 0.41),
    ('Saturn', 10, 0.4, (0.9, 0.8, 0.5, 1), 10759, 0.44),
    ('Uranus', 12, 0.3, (0.5, 0.8, 1, 1), 30687, -0.72),
    ('Neptune', 14, 0.3, (0.3, 0.5, 1, 1), 60190, 0.67),
]

# Create planets
for name, distance, size, color, period, rotation_period in planets:
    bpy.ops.mesh.primitive_uv_sphere_add(radius=size, location=(distance, 0, 0))
    planet = bpy.context.object
    planet.name = name

    # Add material
    mat = bpy.data.materials.new(name + "Material")
    mat.diffuse_color = color
    planet.data.materials.append(mat)

    # Create empty object for orbit
    bpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))
    orbit = bpy.context.object
    orbit.name = name + '_Orbit'

    # Parent planet to orbit
    planet.parent = orbit

    # Adjust orbital speed scaling factor
    orbit_duration = 360 * (period / 365) ** (1/3)  # Cube root scaling

    # Animate the orbit
    orbit.rotation_euler = (0, 0, 0)
    orbit.keyframe_insert(data_path="rotation_euler", frame=1)
    orbit.rotation_euler = (0, 0, math.radians(360))
    orbit.keyframe_insert(data_path="rotation_euler", frame=orbit_duration)

    # Adjust F-curves for continuous looping animation
    if orbit.animation_data and orbit.animation_data.action:
        for fcurve in orbit.animation_data.action.fcurves:
            for keyframe in fcurve.keyframe_points:
                keyframe.interpolation = 'LINEAR'
            fcurve.extrapolation = 'LINEAR'

    # Animate axial rotation of the planet
    # Calculate rotation duration based on rotation period
    # Use absolute value to handle retrograde rotation
    rotation_duration = abs(360 / rotation_period) * 24  # Scale factor for visibility

    planet.rotation_euler = (0, 0, 0)
    planet.keyframe_insert(data_path="rotation_euler", frame=1)
    planet.rotation_euler = (0, 0, math.radians(360) * (-1 if rotation_period < 0 else 1))
    planet.keyframe_insert(data_path="rotation_euler", frame=rotation_duration)

    # Adjust F-curves for continuous looping animation
    if planet.animation_data and planet.animation_data.action:
        for fcurve in planet.animation_data.action.fcurves:
            for keyframe in fcurve.keyframe_points:
                keyframe.interpolation = 'LINEAR'
            fcurve.extrapolation = 'LINEAR'

    # Optionally, add rings to Saturn
    if name == 'Saturn':
        # Create ring at origin
        bpy.ops.mesh.primitive_torus_add(
            location=(0, 0, 0),
            rotation=(math.radians(90), 0, 0),
            major_radius=size + 0.5,
            minor_radius=0.05
        )
        ring = bpy.context.object
        ring.name = 'Saturn_Ring'
        ring.data.materials.append(mat)
        # Parent ring to Saturn planet
        ring.parent = planet
        # Ensure ring is centered on Saturn
        ring.location = (0, 0, 0)

    # Optionally, add moons to Earth
    if name == 'Earth':
        # Create moon at position relative to Earth's orbit center
        moon_distance = size + 0.5
        moon_size = 0.07
        bpy.ops.mesh.primitive_uv_sphere_add(radius=moon_size, location=(moon_distance, 0, 0))
        moon = bpy.context.object
        moon.name = 'Moon'

        # Add material
        mat_moon = bpy.data.materials.new("MoonMaterial")
        mat_moon.diffuse_color = (0.8, 0.8, 0.8, 1)
        moon.data.materials.append(mat_moon)

        # Create empty for moon orbit at Earth's center
        bpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))
        moon_orbit = bpy.context.object
        moon_orbit.name = 'Moon_Orbit'

        # Parent moon to moon orbit
        moon.parent = moon_orbit
        # Parent moon orbit to Earth
        moon_orbit.parent = planet

        # Ensure moon orbit is centered on Earth
        moon_orbit.location = (0, 0, 0)
        # Moon's location is relative to moon orbit
        moon.location = (moon_distance, 0, 0)

        # Animate moon orbit
        moon_orbit.rotation_euler = (0, 0, 0)
        moon_orbit.keyframe_insert(data_path="rotation_euler", frame=1)
        moon_orbit.rotation_euler = (0, 0, math.radians(360))
        moon_orbit.keyframe_insert(data_path="rotation_euler", frame=30)  # Moon orbits Earth in 30 frames

        # Adjust F-curves for continuous looping animation
        if moon_orbit.animation_data and moon_orbit.animation_data.action:
            for fcurve in moon_orbit.animation_data.action.fcurves:
                for keyframe in fcurve.keyframe_points:
                    keyframe.interpolation = 'LINEAR'
                fcurve.extrapolation = 'LINEAR'

# Add camera
bpy.ops.object.camera_add(location=(0, -20, 10), rotation=(math.radians(70), 0, 0))
camera = bpy.context.object
camera.data.lens = 35
bpy.context.scene.camera = camera

# Add light
bpy.ops.object.light_add(type='SUN', location=(0, 0, 0))
light = bpy.context.object
light.data.energy = 5

# Set render settings
bpy.context.scene.render.engine = 'CYCLES'
bpy.context.scene.frame_end = 360

print("Solar system with axial rotations created and animated!")

